
using gold.**
//numeros utilizados en el TP
//p1 = 13, k1 = 3
//p2 = 19, k2 = 2
//p3 = 23, k3 = 5
//p4 = 31, k4 = 7
         
  
var Z
var B
var C

procedure main(args:String[]) begin
	var sc:java.util.Scanner(System.$in)
    
    Z = ('a'‥'z')
    B = ('0'‥'9')
    C= ('A'‥'Z')

   	deCoder:=createDecoder()
    
    //GAutomataFrame.show(coder)
   //GAutomataFrame.show(deCoder)
   
  	
	
  	Decode(deCoder)
		
end



procedure Decode(D:ITransducer) begin
	var sc:java.util.Scanner(System.$in)
   
    
    
    print  "Inicio transductor"
    string = " "
    while string != 	λ do
		print "----------------------------"
		print "Ingrese Mensaje Cifrado: (espacio para finalizar)"
		if string != 	λ then
		
			string:=sc.nextLine()
			if string != 	λ then
				print "El mensaje fue aceptado"+" por el decodificador. Salida: "+D.getOutputString()	

				
			end
	end
end   
  end


function createDecoder():ITransducer begin
	Q := {⟨sc,b⟩ | sc in ('0'‥'9'), 0 <= b < sc} ∪ {"err", "final"}
	
	T := {'x','$'} ∪ ('0'‥'9')
	
	E := ('0'‥'9')
	
	q := ⟨2,0⟩
	
	F := {"final"}
	
	A:ITransducer := GDeterministicTransducer(Q,T,E,q,F,f,h,g)
	
	GAutomataFrame.show(A)
	
end

	
	function f(state, input) begin
	if |state| = 2 then
		if input = 'x' then
			if state[0] = 2 then
				return ⟨7,0⟩
				
			else
				return ⟨2,0⟩
				
			end
		elseif input = '$' then
			return "final"
			
		else
			num := Integer.valueOf(String.valueOf(input))
			
			return ⟨state[0], (state[1] + num)%state[0] ⟩
			
		end
		
	else
		return "err"
		
	end
end


function g(state, input) begin
	
	if |state| = 2 then
		
		if input in {'x', '$'} then
			return state[1].toString()
			
		else
			return λ
			
		end
		
	else
		return λ
		
	end
	
end

function h(state) begin
	return λ
end