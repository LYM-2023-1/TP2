
using gold.**
  
         
  
var A
var B
var C

procedure main(args:String[]) begin
	var sc:java.util.Scanner(System.$in)
    
    A = ('a'‥'z')
    B = ('0'‥'9')
    C= ('A'‥'Z')

   	deCoder:=createDecoder()
    
    //GAutomataFrame.show(coder)
   //GAutomataFrame.show(deCoder)
   
  	
	
  	Decode(deCoder)
		
end



procedure Decode(D:ITransducer) begin
	var sc:java.util.Scanner(System.$in)
   
    
    
    print  "Inicio transductor"
    string = " "
    while string != 	λ do
		print "----------------------------"
		print "Ingrese Mensaje Cifrado: (espacio para finalizar)"
		if string != 	λ then
		
			string:=sc.nextLine()
			if string != 	λ then
		       	result:=D.acceptsString(string)
				print "El mensaje fue "+(result?"aceptado":"rechazado")+" por el decodificador. Salida: "+D.getOutputString()	

				
			end
	end
end   
  end


function createDecoder():ITransducer begin
	Q:= {⟨d,s,pos⟩ | d in {3,2,5}, s in ('a'‥'z'),pos in (0‥5)∪{"_"}  }  ∪ {3,2,5,"I","E"} 
	Σ´ :=('a'‥'z')∪{ ':', '2', '3', '5'}
	Σ:=Σ´∪{ '#'}
	q₀:= "I"
	F:=	 {⟨d,s,pos⟩ | d in {3,2,5}, s in ('a'‥'z'),0 <= pos < 5  }

	return 	GDeterministicTransducer(Q,Σ,Σ´,q₀,F,δ1,g,h1)
end

	
	
	
function δ1(state,input) begin
  if state="I" and input in { '2', '3', '5'}  then return input - '0'
  elseif state in {2,3,5} and input in ('a'‥'z') then return ⟨state, input,"_"⟩
  else return "E"
  end
end
// ------
function δ1(⟨d,s,pos⟩,input) begin
  if pos="_" and input = ':' then return ⟨d,s,1⟩
  elseif pos="_"  then return "E"
  elseif input = '#' and pos!=0 then return "E"
  elseif input = s and pos =0 then return "E"
  elseif input in ('a'‥'z')∪{'#'} then return ⟨d,s,(pos+1)%d⟩
  else return "E"
  end
end



	
function h1(state,input) begin 
  if state="I" and input in { '2', '3', '5'}  then return input-'0' 
  elseif state in {2,3,5} and input in ('a'‥'z') then return input
  else return λ
  end
end

function h1(⟨d,s,pos⟩,input) begin
 	if pos="_" and input = ':' then return input
    elseif input = '#' and pos=0 then return s
 	elseif input in ('a'‥'z') and pos=1 then return shiftSymbol(input,-d)
 	elseif input in ('a'‥'z')  then return input
   	else return λ
  	end
end



function g(s) begin
	return λ
end


 function shiftSymbol(symbol, shift) begin
	var  r : Character
   
  	if symbol in ('a'‥'z') then
	r:= 'a' + (symbol -'a'+ shift)% 26
	elseif symbol in ('A'‥'Z') then
	r:= 'A' + (symbol -'A'+ shift)% 26
	elseif  symbol in ('0'‥'9') then
	r:= '0' + (symbol -'0'+ shift)% 10
	else r:= r
	end		
	return r
end


